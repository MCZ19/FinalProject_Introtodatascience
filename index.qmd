---
title: "Index"
author: "Hannah Shepard-Moore, Gabriel Taylor, Mitchell Zupko, and Anisha Kalra"
editor: visual
execute:
  warning: false
format:
  html:
    embed-resources: true
---

# Project Goals

DC residents can have vastly different outcomes based upon varying demographics. Oftentimes, the neighborhood in which you live and the community to which you belong can lead to vastly different outcomes in terms of health, education, employment opportunities, etc. This project aims to explore whether demographic differences among student populations in DC public schools can be used to predict educational and/or employment outcomes.

# Literature Review

**Introduction:**

Given the number of variables that can be involved in the notion of socioeconomic demographics, many of the current studies and literature take a different approach on the specific aspects of this broader concept. The research articles included in this literature review uncover common themes across studies conducted on this topic. The review of existing research and the synthesis conducted provides helpful background context for the data analysis conducted on our research question.

**Overview of Findings Across Existing Studies:**

In an article published by the American Psychology Association, the relation between social class and job search outcomes was studied. It was noted that the concept of “self-efficacy” is key when it comes to the job search process (DeOrtentiis, et al. 4). For example, the study stated that the mere act of witnessing successful job outcomes in one’s personal life is likely to lead to stronger confidence in one’s ability to successfully obtain employment opportunities for themselves (DeOrtentiis, et al. 4). This indicates that there may be a correlation between socioeconomic status and employment outcomes for an entire family. The multi-generational impacts of socioeconomic status is something to explore further in subsequent analyses. In the research question for this study, the goal is to understand the effects of socioeconomic status of students and its impact on educational and employment outcomes. The initial findings of the APA article indicate that the effects of the social class that one grows up in also impacts the outcomes of students themselves through qualitative means such as confidence (DeOrtentiis, et al. 4).

Additionally, a study published by the National Library of Medicine shares the impacts of socioeconomic status on psychological factors such as feelings and behavior (Manstead. 1). The article noted that socioeconomic factors and the background one comes from often “reinforce these influences of social class background” (Manstead. 1). This point further reiterates the impact socioeconomic factors have on outcomes related to education and employment, indicating that the social class status of a household one is raised in can play a role throughout an individual’s life.

According to a study conducted by the National Center for Education Statistics (NCES), postsecondary education status was analyzed for ninth-grade students based on socioeconomic status (NCES). This research indicates that students who fell in the lowest fifth quintile of socioeconomic status had fewer individuals (7%) in the “highly-selective, 4-year institution” category, whereas students who fell in the highest fifth quintile of socioeconomic status had 37% of students in the category of “highly-selective, 4-year institution” (NCES). This data suggests that socioeconomic factors do play a significant role in the outcomes of higher education, which can impact future employment outcomes as well.\

**Synthesis of Trends and Conclusion**

Overall, many of the current studies conducted on the topic of the impacts of socioeconomic status on education and employment outcomes indicate that socioeconomic status often does have an impact on higher education and employment outcomes. Studies such as the one noted above by the APA suggest that qualitative means such as confidence can vary based on an individual’s socioeconomic status, which can, in turn, play a role in one's ability to obtain employment successfully (DeOrtentiis, et al. 4). Additionally, the data analysis conducted by the National Center for Education Statistics uncovers existing trends of postsecondary education outcomes as it relates to socioeconomic status of high school students (NCES).

These findings provide meaningful background context as our group conducts data analysis on this topic to explore trends in this arena and answer the research question at hand.

**Work Cited:**

National Center for Education Statistics (NCES). (2022). Young Adult Educational and Employment Outcomes by Family Socioeconomic Status. Condition of Education. U.S. Department of Education, Institute of Education Sciences. Retrieved \[date\], from <https://nces.ed.gov/programs/coe/indicator/tbe>.

Manstead ASR. The psychology of social class: How socioeconomic status impacts thought, feelings, and behaviour. Br J Soc Psychol. 2018 Apr;57(2):267-291. doi: 10.1111/bjso.12251. Epub 2018 Feb 28. PMID: 29492984; PMCID: PMC5901394.

DeOrtentiis, P. S., Van Iddekinge, C. H., & Wanberg, C. R. (2021, May 17). Different Starting Lines, Different Finish Times: The Role of Social Class in the Job Search Process. Journal of Applied Psychology. Advance online publication. http://dx.doi.org/10.1037/apl0000915

# Data Wrangling & Cleaning

```{r}
#packages used
library(tidyverse)
library(tidycensus)
library(sf)
library(sp)
library(tigris)
library(readxl)
library(dplyr)
library(readr)
library(tidyr)
library(dplyr)
library(recipes)
library(ggplot2)
library(janitor)
library(patchwork)
library(tidyclust)
library(tidymodels)
library(tidytext)
library(igraph)
library(ggraph)
library(stringr)
library(textrecipes)
library(stopwords)
library(glmnet) #glm package is incompatible with newer versions of R, according to error messages
library(MachineShop)
library(factoextra)
library(rsample)
library(rpart)
library(tidymodels)
library(parsnip)
```

## Census Data

This data comes from the 2022 American Community Survey, and includes census tract-level data in the District of Columbia. The variables included are income, poverty status, SNAP participation, and insurance coverage. Population level statistics were recorded at the block group level, thus requiring some manipulation to join with other tract level variables.

```{r}
#load variables
library(tidycensus)

demographics <- get_acs(geography= "tract",
                  state= "DC",
                  county = "District of Columbia",
                  geometry= TRUE,
                  variables= c("income" = "DP03_0062E", 
                               "poverty_universe" = "B17001_001",
                               "poverty_status" = "B17001_002",
                               "SNAP_universe" = "B22001_001",
                               "SNAP_status" = "B22001_002",
                               "insurance_universe" = "B27001_001",
                               "insurance_men" = "B27001_002",
                               "insurance_women" = "B27001_030"),
                  year= 2022,
                  progress= FALSE) |>
  select(-NAME,
         -moe) %>%
  pivot_wider(names_from = "variable",
              values_from = "estimate")

#Loading Population separately, as it is at a different geo level
block_stats <- get_acs(geography= "block group",
                  state= "DC",
                  county = "District of Columbia",
                  geometry= TRUE,
                  variables= c("population" = "B01003_001"),
                  year= 2022,
                  progress= FALSE)

#st_write(demographics, "demographics.shp")
##need additional files (e.g. .shx, .proj, etc.)
demographics <- read_sf("demographics.shp")

#data cleaning

block_stats_clean <- block_stats %>%
  mutate(GEOID = substr(GEOID, 1, nchar(GEOID) - 1)) %>%
  mutate(estimate = as.numeric(estimate)) %>%
  select(-moe) %>% 
  st_drop_geometry() |>
  group_by(GEOID) %>% 
  pivot_wider(names_from = "variable",
              values_from = "estimate")|>
  select(-NAME) |> #Did not run properly dropping NAME in the earlier step
  group_by(GEOID) %>%
  summarise_all(sum) 

demographics <- merge(demographics, block_stats_clean, by = "GEOID", all.x = TRUE)

map_dbl(.x = demographics, .f = ~ sum(is.na(.x)))

#get rid of census tract with pop=0 or list
demographics_clean <- demographics %>%
  filter(population != 0) %>% 
  filter(population != 1983) %>%
  mutate(poverty_status = as.numeric(poverty_status),
         poverty_universe = as.numeric(poverty_universe),
         SNAP_universe = as.numeric(SNAP_universe),
         SNAP_status = as.numeric(SNAP_status),
         insurance_universe = as.numeric(insurance_universe),
         insurance_men = as.numeric(insurance_men),
         insurance_women = as.numeric(insurance_women),
         population = as.numeric(population),
         income = as.numeric(DP03_0062))

#convert totals to percentages
demographics_percap <- demographics_clean %>%
  mutate(poverty_perc = (poverty_status/poverty_universe),
         SNAP_perc = (SNAP_status/SNAP_universe),
         insurance_perc = ((insurance_men + insurance_women)
                           / population))

```

## School Demographics, Test Scores, and Locations

This data comes from two sources, both of which provide data at the school level for elementary, middle, and high schools: District of Columbia Public Schools (proficiency) and DC Open Data (locations). The proficiency data includes both demographic data (racial and socioeconomic) and test data (English and math). The location data gives the latitude and longitude of each school. The dataset includes 73 public Elementary schools, 23 public Middle Schools, and 17 public High Schools in DC.

Note: The only racial data that was usable was the black population. All other racial groups had too many "n\<10" values, which were used for confidentiality reasons by the school system when the number of students in a racial group was less than 10. This is still a helpful measure of race-based school segregation.

```{r}
#read in the school data
proficiency <- read_xlsx("proficiency.xlsx")
#replacing "." with NAs
proficiency[proficiency == "."] <- NA
#missing data
map_dbl(.x = proficiency, .f = ~ sum(is.na(.x)))


#read in the location data
locations <- read_csv("DC_Public_Schools.csv")
locations <- locations %>%
  select(LONGITUDE, LATITUDE, SCHOOL_NAM, GRADES)
locations <- locations %>%
  rename(school_name = SCHOOL_NAM)

# match schools to locations
school_locations <- full_join(proficiency, locations,
                              by= "school_name")

#clean the school locations dataset
#take out NAs in school_locations
school_locations <- school_locations %>%
  filter(!is.na(LONGITUDE))
school_locations <- st_as_sf(school_locations,
                             coords = c("LONGITUDE", "LATITUDE")) %>%
  st_set_crs(value = 4269)
```

## Combined Data

```{r}
# match locations and demographics
st_crs(school_locations)
schools <- st_join(demographics_percap, school_locations,
                   join= st_contains)
```

## Data Cleaning

```{r}
# reducing NAs and changing names
schools <- schools %>%
  filter(!is.na(type)) %>%
  filter(!is.na(school_name))

#turning school type into a factor
schools <- schools %>%
  mutate(type = factor(type, levels = c("es", "ms", "hs"),
                       labels = c("Elementary School", "Middle School", "High School")))

# demographic percents
schools <- schools %>%
  mutate(black_pop = if_else(black_pop == "n < 10", 1, as.numeric(black_pop))) 
schools <- schools %>%
  mutate(poor_pop = if_else(poor_pop == "n < 10", 1, as.numeric(poor_pop))) 
schools <- schools %>%
  mutate(percent_black = black_pop/english_test)
schools <- schools %>%
  mutate(percent_poor = poor_pop/english_test)

#creation of outcome variables
# continuous: percent proficient in English
schools <- schools %>%
  mutate(percent_ela_proficient = ela_proficient/english_test)
# binary: (1) 50% or more proficient in English
schools <- schools %>%
  mutate(binary_ela_proficient = if_else(percent_ela_proficient >= .50, 1, 0))
# continuous: percent proficient in math
schools <- schools %>%
  mutate(percent_math_proficient = math_proficient/math_test)
# binary: (1) 50% or more proficient in math
schools <- schools %>%
  mutate(binary_math_proficient = if_else(percent_math_proficient >= .50, 1, 0))
```

# Exploratory Data Analysis

There are several variables of interest in our data for the exploratory data analysis, including the school location, the income and insurance use for the census tract, school test scores, and racial makeup of the school population.

### Where are there NAs?

First, we want to check if there are many missing values in the data. No more than 2 missing values exist for any one variable, and most have 0 or 1 missing value.

```{r}
map_dbl(.x = schools, .f = ~ sum(is.na(.x)))
```

### What does the distribution of the variables look like?

One can get a general sense of whether a variable is left-skewed, right-skewed, or more centralized by comparing the relative difference in median and mean values. When the median is greater than the mean, the data may be left-skewed, and vice-versa for right-skewed data.

The percentage of school students who are considered poor is skewed to the left, meaning that a greater share of school populations have greater-than-average poverty (in this case, greater than 55%).

The racial makeup of DC public schools is skewed to the left as well, meaning that most schools have a greater-than-average percentage of students who identify as Black or African American (in this case, greater than 69%).

English-language proficiency scores across DC public schools is skewed to the right, meaning that in most schools, a less-than-average percentage of students received a proficient score (in this case, less than 32% proficient). Conversely, math proficiency scores are left-skewed, so in most schools, a greater-than-average percentage of students received a proficient score (in this case, more than 19% proficient). Unfortunately, in both cases, a very low percent of students receive proficient scores. For math, 75% of schools have a proficiency rate of 30% or less. For English, 75% of schools have a proficiency rate of 48% or less.

```{r}
summary(schools)
```

### What does the distribution of student populations look like?

```{r}
# Percent of students experiencing poverty
schools %>%
  ggplot(mapping= aes(x= percent_poor, fill=type)) +
  geom_histogram(bins= 10, 
                 show.legend = FALSE) +
  scale_x_continuous(breaks= c(0, .5, 1)) +
  facet_wrap(~type) +
  labs(title= paste("Across types of schools, populations tend to have greater",
                    "\nthan 50% poverty"),
       subtitle= paste("Elementary Schools are more segregated by poverty",
                       "level than Middle \nand High Schools"),
       x= "Percent of students who experience poverty",
       y= "Number of schools") +
  theme_minimal()
```

```{r}
# Percent of students who identify as Black or African American
schools %>%
  ggplot(mapping= aes(x= percent_black, fill=type)) +
  geom_histogram(bins= 10, 
                 show.legend = FALSE) +
  scale_x_continuous(breaks= c(0, .5, 1)) +
  facet_wrap(~type) +
  labs(title= paste("Across types of schools, most student populations are",
                    "\nmajority-Black and African American"),
       subtitle= paste("Many schools have nearly or 100% Black/African American",
                       "student populations"),
       x= "Percent of students who are Black/African American",
       y= "Number of schools") +
  theme_minimal()
```

### How do test scores vary by poverty

We tested both English and math scores, and they follow a similar trend, with some obvious outliers. As we explore further, we may need to pay attention the potential negative effects of income-based school segregation.

```{r}
#English Scores
schools %>%
  ggplot(mapping= aes(x= percent_poor,
                      y= percent_ela_proficient),
         color= "royalblue1") +
  geom_point(color= "grey50") +
  labs(title= paste("As the percent of students per school who experience",
                    "\npoverty rises, English proficiency rates fall"),
       subtitle= paste("There are several schools that are clear outliers or",
                       "stray from the \ngeneral trend"),
       x= "Percent of students who experience poverty",
       y= "Percent of students who received proficient English scores") +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal()
```

### How do test scores vary by racial makeup?

This relationship is weaker than that of poverty and test scores, but generally test scores fall when schools have a higher Black/African American populations. As we explore further, we may need to pay attention the potential negative effects of racial school segregation.

```{r}
#English Scores
schools %>%
  ggplot(mapping= aes(x= percent_black,
                      y= percent_ela_proficient)) +
  geom_point(color= "grey50") +
  labs(title= paste("As the percent of students per school who identify as",
                    "Black \nor African American rises, English proficiency",
                    "rates fall"),
       subtitle= paste("This appears to be a weak relationship as many schools",
                       "stray from the \ngeneral trend"),
       x= "Percent of students who experience poverty",
       y= "Percent of students who received proficient English scores") +
  geom_smooth(method = "lm", se = FALSE, color= "red1") +
  theme_minimal()
```

# Geospatial Analysis

```{r, results='hide'}
states <- states()
```

```{r}
# English Scores across DC
schools %>%
  select(geometry, percent_ela_proficient) %>%
  ggplot() +
  geom_sf(data= states[states$STUSPS == "DC", ]) +
  geom_sf(data= schools,
          mapping= aes(fill= percent_ela_proficient)) +
  scale_fill_continuous(name = "English Proficiency Rate",
                        low= "orange",
                        high= "firebrick") +
  labs(title= paste("Schools with higher English proficiency rates",
                    "are \nconcentrated in Northeast DC"),
       subtitle= paste("DC Census Tracts with public schools show distribution",
                       "of higher and \nlower average school scores")) + 
  theme_minimal()
```

```{r}
# Distribution of poverty in schools across DC
schools %>%
  select(geometry, percent_poor) %>%
  ggplot() +
  geom_sf(data= states[states$STUSPS == "DC", ]) +
  geom_sf(data= schools,
          mapping= aes(fill= percent_poor)) +
  scale_fill_continuous(name = "Percent of students in poverty",
                        low= "royalblue",
                        high= "navy") +
  labs(title= paste("Schools with the most students in poverty",
                    "are concentrated \nin Southeast DC"),
       subtitle= paste("DC Census Tracts with public schools show distribution",
                       "of schools with \nhigher and lower poverty rates")) + 
  theme_minimal()
```

```{r}
# Racial makeup of schools across DC
schools %>%
  select(geometry, percent_black) %>%
  ggplot() +
  geom_sf(data= states[states$STUSPS == "DC", ]) +
  geom_sf(data= schools,
          mapping= aes(fill= percent_black)) +
  scale_fill_continuous(name = paste("Percent of students who are \nBlack or",
                                     "African American"),
                        low= "greenyellow",
                        high= "green4") +
  labs(title= paste("Most schools in East and Southeast DC are over",
                    "75% \nBlack or African American"),
       subtitle= paste("DC Census Tracts with public schools show distribution",
                       "of schools with higher \nand lower Black populations")) + 
  theme_minimal()
```

# Machine Learning Model

```{R}
# this is from Mitch and I's stretch exercise
schools_cond <- schools |>
  select(-geometry, 
         -GRADES, 
         -GEOID,
         -school_name,
         -type) |>
  st_drop_geometry() |>
  na.omit() %>%
  mutate_if(is.character, as.numeric)

set.seed(8675309)

educ_rec <- recipe(
  formula = ~., 
  data = schools_cond) %>% 
  step_normalize %>% 
  step_pca() 

```

```{R}
educ_cv <- vfold_cv(schools_cond, v = 10)

kmeans_spec <- k_means(
  num_clusters = tune()) |>
  set_engine(
    "stats",
    nstart = 100
  )

kmeans_wflow <- workflow(
  preprocessor = educ_rec,
  spec = kmeans_spec) 

clust_num_grid <- grid_regular(
  num_clusters(),
  levels = 10
)

res <- tune_cluster(
  kmeans_wflow,
  resamples = educ_cv,
  grid = clust_num_grid,
  control = control_grid(save_pred = TRUE, 
                         extract = identity),
  metrics = cluster_metric_set(sse_within_total,
                               silhouette_avg))

```

```{R}
res %>%
  collect_metrics() %>%
  filter(.metric == "sse_within_total") %>%
  ggplot(aes(x = num_clusters, y = mean)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Number of clusters",
       y = "mean WSS over 5 folds") +
  theme_minimal()

res %>%
  collect_metrics() %>%
  filter(.metric == "silhouette_avg") %>%
  ggplot(aes(x = num_clusters, 
             y = mean)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(breaks = 1:10) +
  labs(x = "Number of clusters",
       y = "mean WSS over 5 folds") +
  theme_minimal()

educ_numeric <- educ_rec %>% 
  prep() %>% 
  bake(new_data = schools_cond)

fviz_nbclust(educ_numeric, 
             FUN = kmeans, 
             method = "gap_stat")


#3b
kmeans_spec2 <- k_means(num_clusters = 1) %>% 
                          set_engine("stats", 
                                     nstart = 100)

kmeans_wflow2 <- workflow(preprocessor = educ_rec, 
                          spec = kmeans_spec2)

educ_kmeans_1 <- kmeans_wflow2 %>% 
  parsnip::fit(data = schools_cond)

#3c

cor(schools_cond)
#For Math Proficient 
# ela_proficient, math_4, #poverty_status


#deciding variables                      

  bind_cols(
    schools_cond, 
    cluster = educ_kmeans_1 |> extract_cluster_assignment() |> pull(.cluster)
    ) |>
  group_by(cluster) |>
  summarize(
    mean(ela_proficient),
    mean(math_4),
    mean(poverty_status) |>
      knitr::kable(digits = 3)
  )

# modeling with k = 2 clusters 

kmeans_spec_k2 <- k_means(num_clusters = 2) %>% 
                          set_engine("stats", 
                                     nstart = 100)

kmeans_wflow_k2 <- workflow(preprocessor = educ_rec, 
                          spec = kmeans_spec_k2)

educ_kmeans_k2 <- kmeans_wflow_k2 %>% 
  parsnip::fit(data = schools_cond)

bind_cols(
select(schools_cond, ela_proficient, math_4, poverty_status),
cluster = educ_kmeans_k2 %>%
extract_cluster_assignment() %>%
pull(.cluster)
) %>%
count(poverty_status, cluster)

#modeling with k = 3 clusters

kmeans_spec_k3 <- k_means(num_clusters = 3) %>% 
                          set_engine("stats", 
                                     nstart = 100)

kmeans_wflow_k3 <- workflow(preprocessor = educ_rec, 
                          spec = kmeans_spec_k3)

educ_kmeans_k3 <- kmeans_wflow2 %>% 
  parsnip::fit(data = schools_cond)

bind_cols(
select(schools_cond, ela_proficient, math_4, poverty_status),
cluster = educ_kmeans_k3 %>%
extract_cluster_assignment() %>%
pull(.cluster)
) %>%
count(poverty_status, cluster)

#Baking to produce PCA for visualizations
educ_rec_pca <- recipe(
  formula = ~.,
  data = schools_cond
) |>
  step_pca(all_numeric(), id = "pca")

educ_pca <- educ_rec_pca |>
  prep() |>
  bake(new_data = schools_cond)

educ_rec_pca |>
  prep() |>
  tidy(id = "pca", type = "variance") |>
  filter(terms == "variance") |>
  mutate(pct_var = value/sum(value)) |>
  slice_head(n = 2)

educ_clusters <- bind_cols(
select(schools_cond, ela_proficient, math_4, poverty_status),
select(educ_pca, PC1, PC2),
cluster1 = educ_kmeans_1 %>%
extract_cluster_assignment() %>%
pull(.cluster),
cluster2 = educ_kmeans_k2 %>%
  extract_cluster_assignment() %>%
pull(.cluster),
cluster3 = educ_kmeans_k3 %>% extract_cluster_assignment() %>%
pull(.cluster)
)

ggplot() +
  geom_point(
    data = educ_clusters,
    mapping = aes(PC1, PC2, color = factor(cluster1))
  ) +
  scale_color_manual(values = c("pink")) +
  labs(
    title = "K-Means with K=1 and PCA",
    x = "PC1 (.99 of Variation)",
    y = "PC2 (.01 of Variation)"
  ) +
  theme_minimal()

ggplot() +
  geom_point(
    data = educ_clusters,
    mapping = aes(PC1, PC2, color = factor(cluster2))
  ) +
  scale_color_manual(values = c("pink", "lightgreen")) +
  labs(
    title = "K-Means with K=2 and PCA",
    x = "PC1 (.99 of Variation)",
    y = "PC2 (.01 of Variation)"
  ) +
  theme_minimal()

ggplot() +
  geom_point(
    data = educ_clusters,
    mapping = aes(PC1, PC2, color = factor(cluster3))
  ) +
  scale_color_manual(values = c("pink", "lightgreen", "lightblue")) +
  labs(
    title = "K-Means with K=3 and PCA",
    x = "PC1 (.99 of Variation)",
    y = "PC2 (.01 of Variation)"
  ) +
  theme_minimal()

#Plotting our principal components with k = 3 lends credence to our optimal clustering being k = 1.

```

# Findings

#### K Means Model

For our kmeans cluster analysis, our model shows that the optimal clustering of components is 1. We used gap statistics and silhouette width to determine optimal number of clusters, k = 1. Our first principal component accounts for almost all of our variation, 99%. If we were doing this as a professional analysis, we would consider alternative models, such as Manhattan, Minkowski, or Gower distances models. These would be more robust to outliers, and can better capture features that deviate from normal. Cluster analysis is used to determine the similarity between observations to their variables. A 99 percent similarity as indicated by the first principal component would be considered high.

### Supervised Machine Learning (Decision Tree Model)

Dataset Source: This data comes from the 2022 American Community Survey, and includes census tract-level data in the District of Columbia.

```{r}
#Set seed and split into training and test data
set.seed(20220414)
schools_split <- initial_split(data = schools, prop = 0.75)
schools_train <- training(x = schools)
schools_test <- testing(x = schools)


#Create Recipe
cart_schools_rec <- 
  recipe(formula = class_ela_proficient ~., data = schools_train_dt) %>%
  step_corr(all_predictors())

#Create model
dectree_mod <-
  decision_tree() %>%
  set_engine(engine = "rpart") %>%
  set_mode(mod = "classification")

#Create a workflow
dectree_mod_wf <- workflow() %>%
  add_recipe(cart_schools_rec) %>%
  add_model(dectree_mod)

#Cross-fold validation
folds_resample <- vfold_cv(data = schools_train_dt, v = 5)

#Fit the Model
dectree_fit <- dectree_mod_wf %>%
  fit(data = schools_train_dt)
rpart.plot::rpart.plot(x = dectree_fit$fit$fit$fit)

#Add Resamples
dectree_fit_resamples <-
  dectree_mod_wf %>%
  fit_resamples(resamples = folds_resample)
```

### Evaluation of Supervised Machine Learning Model (Decision Tree Model)

```{r}
#Evaluate Model
collect_metrics(dectree_fit_resamples, summarize = TRUE)
```

### Interpretation of Supervised Machine Learning Model (Decision Tree Model)

**Background:**

For this dataset, we created a binary variable called “proficiency” from the original variable that indicates the percentage of students in a school that scored a 4 or a 5 on the DC PARCC test. The variable created indicates if a given school had 50% or more students scoring above a 4 or 5 on the DC PARCC exam, the school is “proficient” in English language exam and if a school had less than 50% of students scoring above a 4 or 5 on the DC PARCC exam, the school is “not proficient” in the English language exam. The reason we chose 50% as the threshold was because the data itself showed that not many schools in the DC area had high percentages of students scoring above a 4 or 5 on the DC PARCC exam.

**Conclusions:**

The decision tree model created for our dataset indicates that 73% of schools (a majority) in the dataset are not proficient in English language exam (or that 73% of schools had less than 50% of students scoring a 4 or 5 on the English language exam). 27% of schools in the dataset are proficient in the English language exam (27% of schools had 50% or more students performing higher than a 4 or 5 on the English language exam). Additionally, the decision tree model selected the variable “Percent_poor” as a strong predictor for English language proficiency scores. Percent_poor indicates the percentage of students in a given school that are at or below the poverty line.

If the percentage of students at or below the poverty line in a given school is greater than or equal to 27%, 91% of schools have a majority of students not proficient in the English language exam (and this makes up 81% of the total schools). On the other hand, if the percentage of students in a given school above the poverty line is greater than 27%, the school is likely categorized as proficient in the English language exam (and this makes up 19% of the total schools).

Overall, it was surprising that so many schools were categorized in the “not proficient” category. This model also explains that socioeconomic factors (such as, being above or below the poverty line) do play a role in educational outcomes (such as proficiency in English language exams).

Looking at the error metrics, the accuracy is 89%. Accuracy is the the proportion of correctly classified observations (true positives and true negatives) out of the total number of observations. So 89% of observations were correctly classified by the model. In this case, 89% is a decent but not perfect accuracy measure, but is generally good at predicting true cases.
